'''
Created on Dec 1, 2014

@author: zhaohengyang
'''

import sqlite3
import math
from com.applicationVariables.applicationVariables import *
from com.algorithms import *

#Database interface, function includes: 
#start connection on initial
#close connection on destroy
#sql query


class DatabaseManager(object):
    def __init__(self, db):
        
        try:
            self.conn = sqlite3.connect(db)
            self.conn.execute('pragma foreign_keys = on')
            self.conn.commit()
            self.cur = self.conn.cursor()
        except: 
            print "DatabaseManager::__init__(): problem"
    def query(self, arg):
        try:
            self.cur.execute(arg)
            self.conn.commit()
            return self.cur
        except:
            print "DatabaseManager::query(): problem"

    def __del__(self):
        try:
            self.conn.close()
        except:
            print "DatabaseManager::__del__(): problem"


            
class permissionMappingManager(DatabaseManager):
    def __init__(self, db):
        super(permissionMappingManager, self).__init__(db)
        self.tableName = "permission_mapping"
        
    def getDistinctAPIList(self):
        cursor = self.query("SELECT DISTINCT function FROM " + self.tableName)
        row = [item[0] for item in cursor.fetchall()]
        return row
    
    def writeTopAPIIntoDatabase(self, functionInfo, tableName):  
        self.query("drop table if exists " + tableName)
        self.query("create table if not exists " + tableName +"(Name TEXT)")
        for item in functionInfo:
           function =  item[0] 
           self.query("INSERT INTO " + tableName + " VALUES('" + function + "_" + tableName +"')")

if __name__ == "__main__":
    pTMgr = permissionMappingManager(databasePath)
    row = pTMgr.getDistinctAPIList()
    for item in row:
        print(item)
         
    print(len(row))

