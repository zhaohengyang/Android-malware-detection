from com.applicationVariables.applicationVariables import *
import os,sys,shutil,re
from xml.dom import minidom

class Permission_featue():
    
    def __init__(self):
        self.featureList = {
                   "ACCESS_CHECKIN_PROPERTIES" : "f",
                   "ACCESS_COARSE_LOCATION" : "f",
                   "ACCESS_FINE_LOCATION" : "f",
                   "ACCESS_LOCATION_EXTRA_COMMANDS" : "f",
                   "ACCESS_MOCK_LOCATION" : "f",
                   "ACCESS_NETWORK_STATE" : "f",
                   "ACCESS_SURFACE_FLINGER" : "f",
                   "ACCESS_WIFI_STATE" : "f",
                   "ACCOUNT_MANAGER" : "f",
                   "ADD_VOICEMAIL" : "f",
                   "AUTHENTICATE_ACCOUNTS" : "f",
                   "BATTERY_STATS" : "f",
                   "BIND_ACCESSIBILITY_SERVICE" : "f",
                   "BIND_APPWIDGET" : "f",
                   "BIND_DEVICE_ADMIN" : "f",
                   "BIND_DREAM_SERVICE" : "f",
                   "BIND_INPUT_METHOD" : "f",
                   "BIND_NFC_SERVICE" : "f",
                   "BIND_NOTIFICATION_LISTENER_SERVICE" : "f",
                   "BIND_PRINT_SERVICE" : "f",
                   "BIND_REMOTEVIEWS" : "f",
                   "BIND_TEXT_SERVICE" : "f",
                   "BIND_TV_INPUT" : "f",
                   "BIND_VOICE_INTERACTION" : "f",
                   "BIND_VPN_SERVICE" : "f",
                   "BIND_WALLPAPER" : "f",
                   "BLUETOOTH" : "f",
                   "BLUETOOTH_ADMIN" : "f",
                   "BLUETOOTH_PRIVILEGED" : "f",
                   "BODY_SENSORS" : "f",
                    "BRICK" : "f",
                    "BROADCAST_PACKAGE_REMOVED" : "f",
                    "BROADCAST_SMS" : "f",
                    "BROADCAST_STICKY" : "f",
                    "BROADCAST_WAP_PUSH" : "f",
                    "CALL_PHONE" : "f",
                    "CALL_PRIVILEGED" : "f",
                    "CAMERA" : "f",
                    "CAPTURE_AUDIO_OUTPUT" : "f",
                    "CAPTURE_SECURE_VIDEO_OUTPUT" : "f",
                    "CAPTURE_VIDEO_OUTPUT" : "f",
                    "CHANGE_COMPONENT_ENABLED_STATE" : "f",
                    "CHANGE_CONFIGURATION" : "f",
                    "CHANGE_NETWORK_STATE" : "f",
                    "CHANGE_WIFI_MULTICAST_STATE" : "f",
                    "CHANGE_WIFI_STATE" : "f",
                    "CLEAR_APP_CACHE" : "f",
                    "CLEAR_APP_USER_DATA" : "f",
                    "CONTROL_LOCATION_UPDATES" : "f",
                    "DELETE_CACHE_FILES" : "f",
                    "DELETE_PACKAGES" : "f",
                    "DEVICE_POWER" : "f",
                    "DIAGNOSTIC" : "f",
                    "DISABLE_KEYGUARD" : "f",
                    "DUMP" : "f",
                    "EXPAND_STATUS_BAR" : "f",
                    "FACTORY_TEST" : "f",
                    "FLASHLIGHT" : "f",
                    "FORCE_BACK" : "f",
                    "GET_ACCOUNTS" : "f",
                    "GET_PACKAGE_SIZE" : "f",
                    "GET_TASKS" : "f",
                    "GET_TOP_ACTIVITY_INFO" : "f",
                    "GLOBAL_SEARCH" : "f",
                    "HARDWARE_TEST" : "f",
                    "INJECT_EVENTS" : "f",
                    "INSTALL_LOCATION_PROVIDER" : "f",
                    "INSTALL_PACKAGES" : "f",
                    "INSTALL_SHORTCUT" : "f",
                    "INTERNAL_SYSTEM_WINDOW" : "f",
                    "INTERNET" : "f",
                    "KILL_BACKGROUND_PROCESSES" : "f",
                    "LOCATION_HARDWARE" : "f",
                    "MANAGE_ACCOUNTS" : "f",
                    "MANAGE_APP_TOKENS" : "f",
                    "MANAGE_DOCUMENTS" : "f",
                    "MASTER_CLEAR" : "f",
                    "MEDIA_CONTENT_CONTROL" : "f",
                    "MODIFY_AUDIO_SETTINGS" : "f",
                    "MODIFY_PHONE_STATE" : "f",
                    "MOUNT_FORMAT_FILESYSTEMS" : "f",
                    "MOUNT_UNMOUNT_FILESYSTEMS" : "f",
                    "NFC" : "f",
                    "PERSISTENT_ACTIVITY" : "f",
                    "PROCESS_OUTGOING_CALLS" : "f",
                    "READ_CALENDAR" : "f",
                    "READ_CALL_LOG" : "f",
                    "READ_CONTACTS" : "f",
                    "READ_EXTERNAL_STORAGE" : "f",
                    "READ_FRAME_BUFFER" : "f",
                    "READ_HISTORY_BOOKMARKS" : "f",
                    "READ_INPUT_STATE" : "f",
                    "READ_LOGS" : "f",
                    "READ_PHONE_STATE" : "f",
                    "READ_PROFILE" : "f",
                    "READ_SMS" : "f",
                    "READ_SOCIAL_STREAM" : "f",
                    "READ_SYNC_SETTINGS" : "f",
                    "READ_SYNC_STATS" : "f",
                    "READ_USER_DICTIONARY" : "f",
                    "READ_VOICEMAIL" : "f",
                    "REBOOT" : "f",
                    "RECEIVE_BOOT_COMPLETED" : "f",
                    "RECEIVE_MMS" : "f",
                    "RECEIVE_SMS" : "f",
                    "RECEIVE_WAP_PUSH" : "f",
                    "RECORD_AUDIO" : "f",
                    "REORDER_TASKS" : "f",
                    "RESTART_PACKAGES" : "f",
                    "SEND_RESPOND_VIA_MESSAGE" : "f",
                    "SEND_SMS" : "f",
                    "SET_ACTIVITY_WATCHER" : "f",
                    "SET_ALARM" : "f",
                    "SET_ALWAYS_FINISH" : "f",
                    "SET_ANIMATION_SCALE" : "f",
                    "SET_DEBUG_APP" : "f",
                    "SET_ORIENTATION" : "f",
                    "SET_POINTER_SPEED" : "f",
                    "SET_PREFERRED_APPLICATIONS" : "f",
                    "SET_PROCESS_LIMIT" : "f",
                    "SET_TIME" : "f",
                    "SET_TIME_ZONE" : "f",
                    "SET_WALLPAPER" : "f",
                    "SET_WALLPAPER_HINTS" : "f",
                    "SIGNAL_PERSISTENT_PROCESSES" : "f",
                    "STATUS_BAR" : "f",
                    "SUBSCRIBED_FEEDS_READ" : "f",
                    "SUBSCRIBED_FEEDS_WRITE" : "f",
                    "SYSTEM_ALERT_WINDOW" : "f",
                    "TRANSMIT_IR" : "f",
                    "UNINSTALL_SHORTCUT" : "f",
                    "UPDATE_DEVICE_STATS" : "f",
                    "USE_CREDENTIALS" : "f",
                    "USE_SIP" : "f",
                    "VIBRATE" : "f",
                    "WAKE_LOCK" : "f",
                    "WRITE_APN_SETTINGS" : "f",
                    "WRITE_CALENDAR" : "f",
                    "WRITE_CALL_LOG" : "f",
                    "WRITE_CONTACTS" : "f",
                    "WRITE_EXTERNAL_STORAGE" : "f",
                    "WRITE_GSERVICES" : "f",
                    "WRITE_HISTORY_BOOKMARKS" : "f",
                    "WRITE_PROFILE" : "f",
                    "WRITE_SECURE_SETTINGS" : "f",
                    "WRITE_SETTINGS" : "f",
                    "WRITE_SMS" : "f",
                    "WRITE_SOCIAL_STREAM" : "f",
                    "WRITE_SYNC_SETTINGS" : "f",
                    "WRITE_USER_DICTIONARY" : "f",
                    "WRITE_VOICEMAIL" : "f"
                    }
                
    def createSchema(self, outputPath):
        # Clear the file
        outputfile = open(outputPath,'w')
        outputfile.close() 
            
        # Write arff scheme
        outputfile = open(outputPath,'a') 
        outputfile.write("@relation permission_related_appraoch\n")  
        
        for key in sorted(self.featureList):
            outputfile.write("@attribute '" + key + "' { t, f}\n")            
        
        
        #load the bottom part of scheme
        outputfile.write("@attribute 'app_type' { benign, malware}\n")
        outputfile.write("@data\n")  
        outputfile.close()

class Permission_based_approach(object):
    '''
    This approach extract permission declarations in manifest file as features 
    (true or false as the permission declarations found in the file).
    Then use common classification algorithms to generate a classifier.
    '''


    def __init__(self, wholeSetPath, additionalPath):
        '''
        Constructor
        '''
        self.arffPath = wholeSetPath
        self.additionalPath = additionalPath
        
    def generateArff(self):
        self.createSchema(self.arffPath)
        self.processSamples("/Users/forensics/Documents/mike yang/mike_share_folder/Decompiled_Samples/malware", "malware", self.arffPath) 
        self.processSamples("/Users/forensics/Documents/mike yang/mike_share_folder/Decompiled_Samples/benign", "benign", self.arffPath) 
        self.processSamples("/Volumes/mike yang/additional samples/xiaolu/decompiled", "benign", self.arffPath) 
        self.processSamples("/Users/forensics/Documents/mike yang/mike_share_folder/mike new download/decompiled_samples", "benign", self.arffPath) 
    
    def generateArff_add_sample(self): 
        self.createSchema(self.additionalPath)
        self.processSamples("/Users/zhaohengyang/Documents/malware detection/additional_malware/decompiled_samples", "malware", self.additionalPath) 
           
    def createSchema(self, outputPath):
        # Wirte out schema part
        schema = Permission_featue()
        schema.createSchema(outputPath)
        
    def processSamples(self, samplePath, sampleType, outputPath):
        # Gather all decompiled sample root path into a list
        #print "processSamples: start"    
    
        samplePathList = []
        for directories in os.listdir(samplePath):
            if not re.search(r'^\..*', directories):
                samplePathList.append(samplePath + "/" + directories)
                
        preview = 0
        for smaplePath in samplePathList:
            preview += 1
            print "preview: " + str(preview) + "\t\t" + smaplePath
    
        fininshed = 0
        for samplePath in samplePathList:
            #print "samplePath:" + samplePath
            featureTable = Permission_featue()
            # Extract features from manifest
            self.extractFeaturesFromManifest(samplePath + '/' + 'AndroidManifest.xml', featureTable)

            self.addDataToSchema(sampleType, featureTable, outputPath)
            
            fininshed += 1
            print "finished: " + str(fininshed) + "\t\t" + samplePath


    # Extract features from the manifest file, update featurelist1 and featurelist2 in feature table
    def extractFeaturesFromManifest(self, manifestPath, featureTable):
        try:     
            #parse the xml file, get use-permission session
            xmldoc = minidom.parse(manifestPath)
            itemlist = xmldoc.getElementsByTagName('uses-permission')
            permissionList = []      
            for s in itemlist :
                tempList = s.attributes.keys()
                key = tempList[0]
                permissionFullName = s.attributes[key].value
                #print "key:" + key
                #print "value:" + permissionFullName
                if re.search(r'^android.permission.', permissionFullName):
                    #print permissionFullName
                    tempList = permissionFullName.split('.');
                    #print tempList[-1]
                    permisisonShortName = tempList[-1]
                    permissionList.append(permisisonShortName)
                    
                    if permisisonShortName in featureTable.featureList:
                       featureTable.featureList[permisisonShortName] = 't'   
            
    
        except:
            print "processManifest:processManifest problem"
            
    def addDataToSchema(self, sampleType, featureTable, outputPath):
        data = ""
        
        for key,value in sorted(featureTable.featureList.items()):
            #print key + " : " + str(value)
            data += str(value) + ',' 
        
        data += sampleType + "\n"
        
        outputfile = open(outputPath,'a') 
        outputfile.write(data)

class API_based_approach(object):
    '''
    This approach extract documented APIs as features.
    (true or false as the API found in the decompiled code).
    Then use common classification algorithms to generate a classifier.
    '''
    
    def generateArffFromCapil(self, capilWholeSetPath, wholeSetPath):
        wholeSet = open(capilWholeSetPath,"r")
        relatedWholeSet = open(wholeSetPath,"w")
        for line in wholeSet:
            if line[0] == "@":
                relatedWholeSet.write(line)
            else:
                items = line.split(",")
                newItems = []
                if len(items) > 1:
                    for item in items[:-1]:
                        if int(item) > 0:
                            newItems.append("1")
                        elif int(item) == 0:
                            newItems.append("0")
                        else:
                            print "generateRelatedArff: error"
                    
                    newItems.append(items[-1])
                newLine = ",".join(newItems)
                relatedWholeSet.write(newLine)
    
        