'''
Created on Mar 31, 2015

@author: zhaohengyang
'''
import math

class Algorithms(object):
    
    def centeredCosineSimilarity(self, vector1, vector2):
        avg1 = (vector1[0] + vector1[1] + vector1[2] + vector1[3])/4.0
        avg2 = (vector2[0] + vector2[1] + vector2[2] + vector2[3])/4.0
        benignMag = math.sqrt(math.pow(vector1[0]-avg1,2) + math.pow(vector1[1]-avg1,2) + math.pow(vector1[2]-avg1,2) + math.pow(vector1[3]-avg1,2) )
        malwareMag = math.sqrt(math.pow(vector2[0]-avg2,2) + math.pow(vector2[1]-avg2,2) + math.pow(vector2[2]-avg2,2) + math.pow(vector2[3]-avg2,2) )
        vectorSimilarityUsage = (vector1[0] - avg1) * (vector2[0] - avg2) \
                                + (vector1[1] - avg1) * (vector2[1] - avg2)\
                                + (vector1[2] - avg1) * (vector2[2] - avg2)\
                                + (vector1[3] - avg1) * (vector2[3] - avg2)
        cosineSimilarity = 0
         
        base = benignMag * malwareMag  
        if base != 0:
            cosineSimilarity = vectorSimilarityUsage / base
        else:
            cosineSimilarity = 1.0
        #ranged between (-1,1)
        return cosineSimilarity   
     
    def calculateNormalizedDissimilarity(self, vector1, vector2):   
        cosineSimilarity = self.centeredCosineSimilarity(vector1, vector2)  
        dissimilarity = 0 - cosineSimilarity 
        normalizedDissimilarity = (dissimilarity + 1)/2.0
        #ranged between (0,1)
        return normalizedDissimilarity
    
    def differenceBetweenTwoNum(self, first, second):    
        if first == 0 and second == 0:
            return 0   
        else:
            return abs((first - second) / (float(first + second)/2) * 100 ) #( | V1 - V2 | / ((V1 + V2)/2) ) * 100 
        
'''
v1 = [1,0,0,0]
v2 = [0,100,100,0] 
algo = Algorithms()
print algo.centeredCosineSimilarity(v1,v2)
'''