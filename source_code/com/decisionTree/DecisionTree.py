'''
@author: zhaohengyang
Copyright (c) 2015 zhaohengyang. All rights reserved.
'''

class DecisionTree():
    def __init__(self):
        self.nodeList = []
        
    def addNode(self, node):
        self.nodeList.append(node)
    
    def isIdInTree(self, nodeId):
        found = False
        for item in self.nodeList:
            if item.getId() == nodeId:
                found = True
                return found
        return found
    
    def getTopNode(self): 
        return self.getNodeById("N0")
        
    def getNodeById(self, nodeId):
        for item in self.nodeList:
            if item.getId() == nodeId:
                return item
        
    def getNodeByName(self, name):
        for item in self.nodeList:
            if item.getName() == name:
                return item
            
    def printOut(self):
        for item in self.nodeList:
            item.printOut()
            print ""
         
    def getPathToLeaf(self, instanceDict):
        topNode = self.getTopNode()     
        return self.searchChildNode(instanceDict, topNode, [])      
        
    def searchChildNode(self, instanceDict, currentNode, nodesInPath):
        
        if not currentNode.isLeaf():
            #Add node to path
            curentID = currentNode.getId()
            nodesInPath.append(curentID)
            
            #Get child node
            featueValue = instanceDict[currentNode.getName()]
            #print "featueValue: " + featueValue
            childrenId = currentNode.getChildrenNodeId(featueValue)
            childrenNode = self.getNodeById(childrenId)
            
            #Search child node
            return self.searchChildNode(instanceDict, childrenNode, nodesInPath)
        else: # Return results in leaf node
            return [currentNode.getName(), nodesInPath, currentNode.getTotalHistoryNum(), currentNode.getErrorNum()]
        
    def outputTreePath(self, nodesInPath):
        for nodeId in nodesInPath:
            node = self.getNodeById(nodeId)
            print node.getName()
        
class DecisionTreeNode():
    def __init__(self, nodeId, name, leaf, resultStr):
        self.id = nodeId
        self.nodeName = name
        self.children = {} 
        self.leaf = leaf
        
        self.totalHistoryNum = -1
        self.errorNum = -1 
        self.setResult(resultStr)
        #self.printOut()
        
    
    def getId(self):
        return self.id
    
    def getName(self):  
        return self.nodeName
    
    def getTotalHistoryNum(self):
        return self.totalHistoryNum
    
    def getErrorNum(self):
        return self.errorNum
    
    def addChildNodeId(self, condition, nodeId):
        self.children[condition] = nodeId

           
    def isAChildNodeId(self, condition):
        return condition in self.children.keys()
    
    def getChildrenNodeId(self, featureValue):
        if self.leaf is False:
            leftCondition = self.children.keys()[0]
            leftStatement = str(featureValue) + " " + leftCondition
            rightCondition = self.children.keys()[1]
            rightStatement = str(featureValue) + " " + rightCondition
            
                      
            #print "leftStatement: " + leftStatement
            #print "rightStatement: " + rightStatement
            if eval(leftStatement):
                #print "left children: " + self.children.values()[0]
                return self.children.values()[0]
            elif eval(rightStatement):
                #print "right children: " + self.children.values()[1]
                return self.children.values()[1]
        
        
    
    def isLeaf(self):
        return self.leaf
              
    def setResult(self, resultStr):
        if self.leaf is True:
            if resultStr.find("/") > 0:
                self.totalHistoryNum = float(resultStr.split("/")[0])
                self.errorNum = float(resultStr.split("/")[1])
            else:
                self.totalHistoryNum = float(resultStr)
                self.errorNum = 0
                
    def printOut(self):
        print "nodeId:" + self.id
        print "nodeName:" + self.nodeName 
        if self.leaf is True: 
            print "total:" + str(self.totalHistoryNum)
            print "error:" + str(self.errorNum)
        else:
            print "children:" + str(self.children) 
                       
    def setChild(self, condition, childName):
        self.children[condition] = childName