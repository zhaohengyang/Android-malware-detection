'''
@author: zhaohengyang
Copyright (c) 2015 zhaohengyang. All rights reserved.
'''

# lib path:
apktoolPath = "../../libs/apktool.jar"

# User defined Path:
databasePath = "../workspace/database001.sqlite"  
markPercentageRecordFilePath = "../workspace/results/percentageOfMark.txt"


trainingArffFilePath = '../workspace/results/training.arff'
testingArffFilePath = '../workspace/results/testing.arff'


wholeSetArffFilePath = '../workspace/results/wholeSet.arff'
API_based_WholeSetArffFilePath = '../workspace/results/API_based_WholeSetArffFilePath.arff'
permission_based_WholeSetArffFilePath = '../workspace/results/permission_based_WholeSetArffFilePath.arff'
permission_based_additionalArffFilePath = '../workspace/results/permission_based_additionalArffFilePath.arff'

additionalSampleArffilePath = '../workspace/results/additionalSample.arff'
runTimeProfermancePath = '../workspace/results/runtimeProfermance.txt'


test1_frequencyDiffReport = '../workspace/results/test1_frequencyDiffReport.txt'
test1_CapilReport = '../workspace/results/test1_CapilReport.txt'
test1_InfoReport = '../workspace/results/test1_InfoReport.txt'
test2_Info_Capil = '../workspace/results/test2_Info_Capil.txt'
test3_acc = '../workspace/results/test3_acc.txt'
test3_AUR = '../workspace/results/test3_AUR.txt'


trainingFunctionSetArffPath = '../workspace/results/trainingFunc.arff'
testingFunctionSetArffPath = '../workspace/results/testingFunc.arff'
trainingFunctionSetFormat2ArffPath = '../workspace/results/trainingFormat2Func.arff'
testingFunctionSetFormat2ArffPath = '../workspace/results/testingFormat2Func.arff'

TABLENAMES = {
        "malwareFre" : "malwareFre",
        "frequencyDif" : "frequencyDif",
        "sampleCoverage" : "sampleCoverage",
        "DissimilarityAndSampleCoverage" : "DissimilarityAndSampleCoverage",
        "benignSampleCoverage" : "benignSampleCoverage",
        "malwareSampleCoverage" : "malwareSampleCoverage",
        "usedAPIFormat1" : "usedAPIFormat1",
        "usedAPIFormat2" : "usedAPIFormat2",
        "vectorDif" : "vectorDif",
        "malwareFreAhead" : "malwareFreAhead"
}  

SAMPLESETS =   {
        "training" : "training",
        "testing" : "testing",
}    